diff --git a/coin/provisioning/common/linux/android_linux.sh b/coin/provisioning/common/linux/android_linux.sh
index 01de5f077b..70b5d95c53 100755
--- a/coin/provisioning/common/linux/android_linux.sh
+++ b/coin/provisioning/common/linux/android_linux.sh
@@ -55,8 +55,8 @@ toolsVersion="r26.1.1"
 toolsFile="sdk-tools-linux-4333796.zip"
 ndkVersion="r20"
 ndkFile="android-ndk-$ndkVersion-linux-x86_64.zip"
-sdkBuildToolsVersion="29.0.3"
-sdkApiLevel="android-29"
+sdkBuildToolsVersion="${ANDROID_BUILD_TOOLS_REVISION:-29.0.3}"
+sdkApiLevel="android-${ANDROID_NATIVE_API_LEVEL:-29}"
 
 toolsSha1="8c7c28554a32318461802c1291d76fccfafde054"
 ndkSha1="8665fc84a1b1f0d6ab3b5fdd1e30200cc7b9adff"
diff --git a/qtbase/mkspecs/android-clang/qmake.conf b/qtbase/mkspecs/android-clang/qmake.conf
index d9a51835d8..d78d1683f8 100644
--- a/qtbase/mkspecs/android-clang/qmake.conf
+++ b/qtbase/mkspecs/android-clang/qmake.conf
@@ -42,6 +42,7 @@ isEmpty(ALL_ANDROID_ABIS): ALL_ANDROID_ABIS = $$DEFAULT_ANDROID_ABIS
 isEmpty(ALL_ANDROID_ABIS): ALL_ANDROID_ABIS = arm64-v8a armeabi-v7a x86_64 x86
 
 CONFIG += $$ANDROID_PLATFORM
+CONFIG += rtti exceptions
 
 ANDROID_MIN_SDK_VERSION = $$replace(ANDROID_PLATFORM, "android-", "")
 ANDROID_TARGET_SDK_VERSION = 29
@@ -52,6 +53,7 @@ QMAKE_CXX        = $$NDK_LLVM_PATH/bin/clang++
 QMAKE_LINK       = $$QMAKE_CXX
 QMAKE_OBJCOPY    = $$NDK_LLVM_PATH/bin/llvm-objcopy
 QMAKE_AR         = $$NDK_LLVM_PATH/bin/llvm-ar cqs
+QMAKE_RANLIB     = $$NDK_LLVM_PATH/bin/llvm-ranlib
 QMAKE_OBJCOPY    = $$NDK_LLVM_PATH/bin/llvm-objcopy
 QMAKE_NM         = $$NDK_LLVM_PATH/bin/llvm-nm -P
 
@@ -65,9 +67,10 @@ QMAKE_CFLAGS_YACC       = -Wno-unused -Wno-parentheses
 QMAKE_CFLAGS_THREAD     = -D_REENTRANT
 QMAKE_CFLAGS_HIDESYMS   = -fvisibility=hidden
 QMAKE_CFLAGS_NEON       = -mfpu=neon
+QMAKE_CFLAGS_SHLIB      += $$QMAKE_CFLAGS_NEON
 
-QMAKE_LFLAGS_APP        = -Wl,--build-id=sha1 -Wl,--no-undefined -Wl,-z,noexecstack -shared
-QMAKE_LFLAGS_SHLIB      = -Wl,--build-id=sha1 -Wl,--no-undefined -Wl,-z,noexecstack -shared
+QMAKE_LFLAGS_APP        = -Wl,--build-id=sha1 -Wl,--no-undefined -Wl,-z,noexecstack -Wl,--hash-style=both -shared -frtti -rdynamic
+QMAKE_LFLAGS_SHLIB      = -Wl,--build-id=sha1 -Wl,--no-undefined -Wl,-z,noexecstack -Wl,--hash-style=both -shared -frtti -rdynamic
 QMAKE_LFLAGS_PLUGIN     = $$QMAKE_LFLAGS_SHLIB
 QMAKE_LFLAGS_NOUNDEF    = -Wl,--no-undefined
 QMAKE_LFLAGS_RPATH      = -Wl,-rpath=
diff --git a/qtbase/mkspecs/features/android/android.prf b/qtbase/mkspecs/features/android/android.prf
index 7f7fec85f7..cff8cf1503 100644
--- a/qtbase/mkspecs/features/android/android.prf
+++ b/qtbase/mkspecs/features/android/android.prf
@@ -45,7 +45,12 @@ build_pass|if(single_android_abi:!single_arch) {
     } else: contains(TEMPLATE, "lib"):!static:!QTDIR_build:android_install {
         tmpvar = $$str_member($$TARGET, -$$str_size($${QT_ARCH}), -1)
         !equals(tmpvar, $${QT_ARCH}): TARGET = $${TARGET}_$${QT_ARCH}
-        target.path = /libs/$$ANDROID_TARGET_ARCH/
+        ANDROID_INSTALL_LIBS = $$(ANDROID_INSTALL_LIBS)
+        isEmpty(ANDROID_INSTALL_LIBS) {
+            target.path=/libs/$$ANDROID_TARGET_ARCH/
+        } else {
+            target.path=$$ANDROID_INSTALL_LIBS/
+        }
         INSTALLS *= target
     }
 } else {
diff --git a/qtbase/mkspecs/features/android/default_pre.prf b/qtbase/mkspecs/features/android/default_pre.prf
index 9f90dcb391..550fedeeac 100644
--- a/qtbase/mkspecs/features/android/default_pre.prf
+++ b/qtbase/mkspecs/features/android/default_pre.prf
@@ -20,6 +20,7 @@ DEFAULT_ANDROID_TARGET_ARCH=$${QT_ARCH}
 
 ANDROID_TARGET_ARCH = $$(ANDROID_TARGET_ARCH)
 isEmpty(ANDROID_TARGET_ARCH): ANDROID_TARGET_ARCH = $$DEFAULT_ANDROID_TARGET_ARCH
+else: QT_ARCH = $${ANDROID_TARGET_ARCH}
 
 # Follow https://android.googlesource.com/platform/ndk/+/ndk-release-r20/docs/BuildSystemMaintainers.md
 
@@ -76,7 +77,7 @@ else: equals(QT_ARCH, x86_64): CROSS_COMPILE = $$NDK_LLVM_PATH/bin/x86_64-linux-
 else: equals(QT_ARCH, arm64-v8a): CROSS_COMPILE = $$NDK_LLVM_PATH/bin/aarch64-linux-android-
 else: CROSS_COMPILE = $$NDK_LLVM_PATH/bin/arm-linux-androideabi-
 
-QMAKE_RANLIB            = $${CROSS_COMPILE}ranlib
+#QMAKE_RANLIB            = $${CROSS_COMPILE}ranlib
 QMAKE_LINK_SHLIB        = $$QMAKE_LINK
 QMAKE_LFLAGS            =
 
diff --git a/qtbase/mkspecs/features/exceptions_off.prf b/qtbase/mkspecs/features/exceptions_off.prf
index 9c8a4043ea..338b14c4b6 100644
--- a/qtbase/mkspecs/features/exceptions_off.prf
+++ b/qtbase/mkspecs/features/exceptions_off.prf
@@ -1,5 +1,6 @@
-CONFIG -= exceptions
-QMAKE_CFLAGS += $$QMAKE_CFLAGS_EXCEPTIONS_OFF
-QMAKE_CXXFLAGS += $$QMAKE_CXXFLAGS_EXCEPTIONS_OFF
-QMAKE_LFLAGS += $$QMAKE_LFLAGS_EXCEPTIONS_OFF
-DEFINES += QT_NO_EXCEPTIONS
+#CONFIG -= exceptions
+#QMAKE_CFLAGS += $$QMAKE_CFLAGS_EXCEPTIONS_OFF
+#QMAKE_CXXFLAGS += $$QMAKE_CXXFLAGS_EXCEPTIONS_OFF
+#QMAKE_LFLAGS += $$QMAKE_LFLAGS_EXCEPTIONS_OFF
+#DEFINES += QT_NO_EXCEPTIONS
+include(exceptions.prf)
diff --git a/qtbase/mkspecs/features/rtti_off.prf b/qtbase/mkspecs/features/rtti_off.prf
index b520bfa8b7..69e72fe248 100644
--- a/qtbase/mkspecs/features/rtti_off.prf
+++ b/qtbase/mkspecs/features/rtti_off.prf
@@ -1,4 +1,5 @@
-CONFIG -= rtti
-QMAKE_CFLAGS += $$QMAKE_CFLAGS_RTTI_OFF
-QMAKE_CXXFLAGS += $$QMAKE_CXXFLAGS_RTTI_OFF
-DEFINES += QT_NO_DYNAMIC_CAST
\ No newline at end of file
+#CONFIG -= rtti
+#QMAKE_CFLAGS += $$QMAKE_CFLAGS_RTTI_OFF
+#QMAKE_CXXFLAGS += $$QMAKE_CXXFLAGS_RTTI_OFF
+#DEFINES += QT_NO_DYNAMIC_CAST
+include(rtti.prf)
diff --git a/qtbase/src/3rdparty/forkfd/forkfd.c b/qtbase/src/3rdparty/forkfd/forkfd.c
index b663b8a950..6a234b7917 100644
--- a/qtbase/src/3rdparty/forkfd/forkfd.c
+++ b/qtbase/src/3rdparty/forkfd/forkfd.c
@@ -50,8 +50,10 @@
 #include <time.h>
 #include <unistd.h>
 
-#ifdef __linux__
-#  define HAVE_WAIT4    1
+#if defined(__linux__)
+#  if __ANDROID_API__ > 19
+#    define HAVE_WAIT4    1
+#  endif
 #  if defined(__BIONIC__) || (defined(__GLIBC__) && (__GLIBC__ << 8) + __GLIBC_MINOR__ >= 0x208 && \
        (!defined(__UCLIBC__) || ((__UCLIBC_MAJOR__ << 16) + (__UCLIBC_MINOR__ << 8) + __UCLIBC_SUBLEVEL__ > 0x90201)))
 #    include <sys/eventfd.h>
diff --git a/qtbase/src/android/templates/build.gradle b/qtbase/src/android/templates/build.gradle
index 443a800244..7116ad0dfd 100644
--- a/qtbase/src/android/templates/build.gradle
+++ b/qtbase/src/android/templates/build.gradle
@@ -36,14 +36,17 @@ android {
 
     compileSdkVersion androidCompileSdkVersion.toInteger()
 
-    buildToolsVersion '28.0.3'
+    buildToolsVersion '29.0.2'
 
     sourceSets {
         main {
             manifest.srcFile 'AndroidManifest.xml'
-            java.srcDirs = [qt5AndroidDir + '/src', 'src', 'java']
-            aidl.srcDirs = [qt5AndroidDir + '/src', 'src', 'aidl']
-            res.srcDirs = [qt5AndroidDir + '/res', 'res']
+            //java.srcDirs = [qt5AndroidDir + '/src', 'src', 'java']
+            java.srcDirs = ['src', 'java']
+            //aidl.srcDirs = [qt5AndroidDir + '/src', 'src', 'aidl']
+            aidl.srcDirs = ['src', 'aidl']
+            //res.srcDirs = [qt5AndroidDir + '/res', 'res']
+            res.srcDirs = ['res']
             resources.srcDirs = ['resources']
             renderscript.srcDirs = ['src']
             assets.srcDirs = ['assets']
diff --git a/qtbase/src/corelib/global/qlogging.cpp b/qtbase/src/corelib/global/qlogging.cpp
index 89f49324c0..c49affbe47 100644
--- a/qtbase/src/corelib/global/qlogging.cpp
+++ b/qtbase/src/corelib/global/qlogging.cpp
@@ -110,6 +110,9 @@
 #    define QLOGGING_HAVE_BACKTRACE
 #  endif
 #endif
+#if defined(__ANDROID_API__) && (__ANDROID_API__ < 33)
+#undef QLOGGING_HAVE_BACKTRACE
+#endif
 
 #if QT_CONFIG(slog2)
 extern char *__progname;
diff --git a/qtbase/src/corelib/tools/qsharedpointer.cpp b/qtbase/src/corelib/tools/qsharedpointer.cpp
index a24b689181..d19749fa43 100644
--- a/qtbase/src/corelib/tools/qsharedpointer.cpp
+++ b/qtbase/src/corelib/tools/qsharedpointer.cpp
@@ -1453,6 +1453,9 @@ QT_END_NAMESPACE
 #      define BACKTRACE_SUPPORTED
 #    endif
 #  endif
+#if defined(__ANDROID_API__) && (__ANDROID_API__ < 33)
+#undef QLOGGING_HAVE_BACKTRACE
+#endif
 
 #  if defined(BACKTRACE_SUPPORTED)
 #    include <sys/types.h>
diff --git a/qtbase/src/plugins/sqldrivers/mysql/qsql_mysql.cpp b/qtbase/src/plugins/sqldrivers/mysql/qsql_mysql.cpp
index 7ca055eea2..49a6ae5b7c 100644
--- a/qtbase/src/plugins/sqldrivers/mysql/qsql_mysql.cpp
+++ b/qtbase/src/plugins/sqldrivers/mysql/qsql_mysql.cpp
@@ -223,7 +223,7 @@ public:
     struct QMyField
     {
         char *outField = nullptr;
-        MYSQL_FIELD *myField = nullptr;
+        const MYSQL_FIELD *myField = nullptr;
         QMetaType::Type type = QMetaType::UnknownType;
         my_bool nullIndicator = false;
         ulong bufLength = 0ul;
@@ -361,11 +361,10 @@ static bool qIsInteger(int t)
 void QMYSQLResultPrivate::bindBlobs()
 {
     int i;
-    MYSQL_FIELD *fieldInfo;
     MYSQL_BIND *bind;
 
     for(i = 0; i < fields.count(); ++i) {
-        fieldInfo = fields.at(i).myField;
+        const MYSQL_FIELD *fieldInfo = fields.at(i).myField;
         if (qIsBlob(inBinds[i].buffer_type) && meta && fieldInfo) {
             bind = &inBinds[i];
             bind->buffer_length = fieldInfo->max_length;
@@ -392,35 +391,34 @@ bool QMYSQLResultPrivate::bindInValues()
     inBinds = new MYSQL_BIND[fields.size()];
     memset(inBinds, 0, fields.size() * sizeof(MYSQL_BIND));
 
-    MYSQL_FIELD *fieldInfo;
+    const MYSQL_FIELD *fieldInfo;
 
     while((fieldInfo = mysql_fetch_field(meta))) {
+        MYSQL_BIND *bind = &inBinds[i];
+
         QMyField &f = fields[i];
         f.myField = fieldInfo;
-
+        bind->buffer_length = f.bufLength = fieldInfo->length + 1;
+        bind->buffer_type = fieldInfo->type;
         f.type = qDecodeMYSQLType(fieldInfo->type, fieldInfo->flags);
         if (qIsBlob(fieldInfo->type)) {
             // the size of a blob-field is available as soon as we call
             // mysql_stmt_store_result()
             // after mysql_stmt_exec() in QMYSQLResult::exec()
-            fieldInfo->length = 0;
+            bind->buffer_length = f.bufLength = 0;
             hasBlobs = true;
         } else if (qIsInteger(f.type)) {
-            fieldInfo->length = 8;
+            bind->buffer_length = f.bufLength = 8;
         } else {
-            fieldInfo->type = MYSQL_TYPE_STRING;
+            bind->buffer_type = MYSQL_TYPE_STRING;
         }
-        bind = &inBinds[i];
-        field = new char[fieldInfo->length + 1];
-        memset(field, 0, fieldInfo->length + 1);
 
-        bind->buffer_type = fieldInfo->type;
-        bind->buffer = field;
-        bind->buffer_length = f.bufLength = fieldInfo->length + 1;
         bind->is_null = &f.nullIndicator;
         bind->length = &f.bufLength;
         bind->is_unsigned = fieldInfo->flags & UNSIGNED_FLAG ? 1 : 0;
-        f.outField=field;
+
+        char *field = new char[bind->buffer_length + 1]{};
+        bind->buffer = f.outField = field;
 
         ++i;
     }
